name: Build Kivy Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:  # allows manual run

jobs:
  build:
    runs-on: ubuntu-20.04  # Use Ubuntu 20.04 for better compatibility

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Install system dependencies
      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev python3-dev python3-pip openjdk-11-jdk wget unzip coreutils zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 libjpeg-dev libpng-dev libfreetype6-dev liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev
        shell: bash

      # Download and install Android SDK command line tools + SDK packages
      - name: Setup Android SDK command line tools and packages
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest

          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$PATH

          # Accept licenses
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # Install required SDK components
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "build-tools;33.0.2" "platforms;android-33" "ndk;23.1.7779620" "cmdline-tools;latest"
        shell: bash
        env:
          ANDROID_HOME: $HOME/android-sdk
          ANDROID_SDK_ROOT: $HOME/android-sdk

      # Setup Python and install buildozer
      - name: Setup Python and Buildozer
        run: |
          pip3 install --user Cython==0.29.36 buildozer
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      # Initialize buildozer (create default spec if needed)
      - name: Initialize Buildozer
        run: |
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
        shell: bash

      # Display buildozer spec for debugging
      - name: Display Buildozer Spec
        run: |
          if [ -f buildozer.spec ]; then
            cat buildozer.spec
          else
            echo "No buildozer.spec file found"
          fi
        shell: bash

      # Run Buildozer to build APK with verbose output
      - name: Build APK with Buildozer (Verbose)
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$HOME/android-sdk/build-tools/33.0.2:$PATH
          
          echo "Environment variables:"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "PATH: $PATH"
          
          echo "Checking SDK tools:"
          which sdkmanager && sdkmanager --version
          which adb && adb version
          
          echo "Building APK..."
          buildozer -v android debug
        shell: bash
        env:
          ANDROID_HOME: $HOME/android-sdk
          ANDROID_SDK_ROOT: $HOME/android-sdk
          PATH: $HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$HOME/android-sdk/build-tools/33.0.2:$PATH

      # Find and upload APK artifact
      - name: Find APK file
        id: find-apk
        run: |
          echo "Searching for APK files..."
          find . -name "*.apk" -type f
          APK_FILE=$(find . -name "*.apk" -type f | head -n 1)
          if [ -n "$APK_FILE" ]; then
            echo "filename=$APK_FILE" >> $GITHUB_OUTPUT
            echo "Found APK: $APK_FILE"
          else
            echo "No APK file found"
          fi
        shell: bash

      # Upload APK artifact (if found)
      - name: Upload APK artifact
        if: steps.find-apk.outputs.filename != ''
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: ${{ steps.find-apk.outputs.filename }}
      
      # Upload build logs even if build failed
      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            *.log
            .buildozer/**/*.log
